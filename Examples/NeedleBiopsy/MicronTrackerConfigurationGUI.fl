# data file for the Fltk User Interface Designer (fluid)
version 1.0107
header_name {.h} 
code_name {.cxx}
decl {\#include <FL/Fl_File_Chooser.H>} {} 

class MicronTrackerConfigurationGUI {open : {public igstk::TrackerConfigurationGUIBase}
} {
  Function {MicronTrackerConfigurationGUI()} {open
  } {
    Fl_Window TrackerConfigurationWindow {
      label {Mcron Tracker Configuration} open
      xywh {933 106 418 475} type Double
      code0 {\#include "igstkTrackerConfigurationGUIBase.h"}
      code1 {\#include "igstkMicronTrackerConfigurationIO.h"} visible
    } {
      Fl_Group ReferenceToolGroup {open
        xywh {25 375 360 53} box ENGRAVED_BOX deactivate
      } {
        Fl_Choice ReferenceToolMarker {
          label {Reference Tool Marker:}
          xywh {212 391 63 25} down_box BORDER_BOX
        } {}
      }
      Fl_Round_Button UseReferenceTool {
        label {Use Reference Tool ?}
        callback {if( UseReferenceTool->value() )
{
  ReferenceToolGroup->activate();
}
else
{
  ReferenceToolGroup->deactivate();
}}
        xywh {30 340 25 25} down_box ROUND_DOWN_BOX
      }
      Fl_Group TrackerToolGroup {open
        xywh {20 152 365 178} box ENGRAVED_BOX
      } {
        Fl_Choice TrackerToolMarker {
          label {Tracker Tool Marker:}
          xywh {206 168 65 25} down_box BORDER_BOX
        } {}
        Fl_Group {} {
          label {Tool Tip Offset}
          xywh {20 220 365 70} box ENGRAVED_BOX
        } {
          Fl_Value_Input OffsetX {
            label {X:}
            xywh {70 250 55 25}
          }
          Fl_Value_Input OffsetY {
            label {Y:}
            xywh {190 250 55 25}
          }
          Fl_Value_Input OffsetZ {
            label {Z:}
            xywh {315 250 55 25}
          }
        }
        Fl_Round_Button SwitchZAxes {
          label {Switch Z axis?}
          xywh {55 296 25 25} down_box ROUND_DOWN_BOX value 1
        }
      }
      Fl_Button {} {
        label Confirm
        callback {GetGUISetting();
RequestGetConfiguration();
TrackerConfigurationWindow->hide();}
        xywh {315 435 70 25}
      }
      Fl_Output CalibrationFileDir {
        label {Calibration File Dir:}
        xywh {145 20 215 25}
      }
      Fl_Button {} {
        label {...}
        callback {char * fileDir = fl_dir_chooser("SROM file for tracker tool","");
if( fileDir )
{
  CalibrationFileDir->value(fileDir);
}}
        xywh {365 19 25 25}
      }
      Fl_Output InitializationFile {
        label {Initialization File Dir:}
        xywh {145 60 215 25}
      }
      Fl_Button {} {
        label {...}
        callback {char * fileName = fl_file_chooser("SROM file for tracker tool","*.*","");
if( fileName )
{
  InitializationFile->value(fileName);
}}
        xywh {365 59 25 25}
      }
      Fl_Button {} {
        label {...}
        callback {char * fileDir = fl_dir_chooser("SROM file for tracker tool","");
if( fileDir )
{
  TemplateFileDir->value(fileDir);
  TrackerToolMarker->clear();
  ReferenceToolMarker->clear();
  itksys::Directory * dir = new itksys::Directory;
  if( dir->Load(fileDir) )
    {
    int n = dir->GetNumberOfFiles();
    for( int i=0; i<n; i++ )
      {
      std::string s = dir->GetPath();
      s += dir->GetFile(i);
      if(itksys::SystemTools::FileIsDirectory(s.c_str()))
        {
        continue;
        }
      TrackerToolMarker->add(dir->GetFile(i));
      ReferenceToolMarker->add(dir->GetFile(i));    
      }
    TrackerToolMarker->value(0);
    ReferenceToolMarker->value(1);
    }
}}
        xywh {365 98 25 25}
      }
      Fl_Output TemplateFileDir {
        label {Template File Dir:}
        xywh {145 100 215 25}
      }
    }
    code {TrackerConfigurationWindow->show();} {}
  }
  Function {~MicronTrackerConfigurationGUI()} {open return_type virtual
  } {}
  Function {InitializeGUI()} {open return_type {virtual void}
  } {
    code {igstk::MicronTrackerConfigurationIO * reader = new igstk::MicronTrackerConfigurationIO;
reader->SetFileName( "Micron.ini" );
if (reader->RequestRead())
{
igstk::MicronTrackerConfiguration * conf = reader->GetMicronTrackerConfiguration();

CalibrationFileDir->value( conf->m_CameraCalibrationFileDirectory.c_str() );
InitializationFile->value( conf->m_InitializationFile.c_str());
TemplateFileDir->value(    conf->m_TemplatesDirectory.c_str());


// Wired or Wireless tool, port & SROMs
std::string toolMarker = conf->m_TrackerToolList[0]->m_MarkerName;
  
// Reference tool
UseReferenceTool->value(0);
ReferenceToolGroup->deactivate();
std::string refMarker = "";
if(conf->m_TrackerToolList.size()==2)
{
  UseReferenceTool->value(1);
  ReferenceToolGroup->activate();
  refMarker = conf->m_TrackerToolList[1]->m_MarkerName;
}

    
TrackerToolMarker->clear();
ReferenceToolMarker->clear();
itksys::Directory * dir = new itksys::Directory;
int index = 0;
int toolIndex = 0;
int refIndex = 0;
if( dir->Load(conf->m_TemplatesDirectory.c_str()) )
  {
  int n = dir->GetNumberOfFiles();
  for( int i=0; i<n; i++ )
    {
    std::string s = dir->GetPath();
    s += dir->GetFile(i);
    if(itksys::SystemTools::FileIsDirectory(s.c_str()))
      {
      continue;
      }
    TrackerToolMarker->add(dir->GetFile(i));
    ReferenceToolMarker->add(dir->GetFile(i));
    index ++;
    if ( !itksys::SystemTools::Strucmp( toolMarker.c_str(), dir->GetFile(i) ) )
      {
      toolIndex = index-1;
      std::cout << "ToolIndex" << toolIndex << "\\n";
      }
    if ( !itksys::SystemTools::Strucmp( refMarker.c_str(), dir->GetFile(i) ) )
      {
      refIndex = index-1;
      std::cout << "refIndex" << refIndex << "\\n";
      }
    }
  }  

TrackerToolMarker->value(toolIndex);
ReferenceToolMarker->value(refIndex);
}} {}
  }
  Function {GetGUISetting()} {open return_type {virtual void}
  } {
    code {igstk::MicronTrackerConfiguration * conf = new igstk::MicronTrackerConfiguration;

conf->m_Frequency = 30;
conf->m_CameraCalibrationFileDirectory = CalibrationFileDir->value();
conf->m_InitializationFile = InitializationFile->value();
conf->m_TemplatesDirectory = TemplateFileDir->value();
    
conf->m_TrackerToolList.clear();
 
// Wired or Wireless tool, port & SROMs
igstk::MicronTrackerToolConfiguration * tool = new igstk::MicronTrackerToolConfiguration;
tool->m_MarkerName = TrackerToolMarker->text();
tool->m_IsReference = 0;
  
// Calibration  
igstk::Transform toolCalibrationTransform;

igstk::Transform::VectorType translation;
translation[0] = OffsetX->value();   // Tip offset
translation[1] = OffsetY->value();
translation[2] = OffsetZ->value();

igstk::Transform::VersorType rotation;
rotation.SetIdentity();
if (SwitchZAxes->value())
  {
  //rotation.Set(1.0, 0.0, 0.0, 0.0);
  rotation.SetRotationAroundY(-90);
  }
 
toolCalibrationTransform.SetTranslationAndRotation( translation, rotation, 0.1, igstk::TimeStamp::GetLongestPossibleTime());

tool->m_CalibrationTransform = toolCalibrationTransform;

conf->m_TrackerToolList.push_back( tool );

// Reference tool
if(UseReferenceTool->value())
{
  igstk::MicronTrackerToolConfiguration * refTool = new igstk::MicronTrackerToolConfiguration; 
  refTool->m_MarkerName = ReferenceToolMarker->text();
  
  igstk::Transform toolCalibrationTransform2;
  toolCalibrationTransform2.SetToIdentity( igstk::TimeStamp::GetLongestPossibleTime());
  refTool->m_CalibrationTransform = toolCalibrationTransform2;
   
  refTool->m_IsReference = 1;
  conf->m_TrackerToolList.push_back( refTool );
}

m_TrackerConfiguration.SetTrackerType( igstk::TrackerConfiguration::Micron);
m_TrackerConfiguration.SetMicronTrackerConfiguration( conf );

igstk::MicronTrackerConfigurationIO * writer = new igstk::MicronTrackerConfigurationIO;
writer->SetFileName( "Micron.ini" );
writer->SetMicronTrackerConfiguration( conf );
writer->RequestWrite();} {selected
    }
  }
} 
